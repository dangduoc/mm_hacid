@page
@model Project.IndexModel
@section Styles{
    <link rel="stylesheet" href="~/lib/datatables-bs4/css/dataTables.bootstrap4.css">
    <link rel="stylesheet" href="~/lib/jquery-confirm/jquery-confirm.min.css" />
    <style>
        table.dataTable tbody tr.selected {
            background-color: #B0BED9;
        }

        #filter_search {
            flex: 1;
            display: flex;
            justify-content: flex-end;
            align-items: center;
        }

            #filter_search label {
                display: flex;
                width: 220px;
                margin-left: auto;
                align-items: center;
                margin-bottom: 0;
            }

                #filter_search label input {
                    margin-left: 5px;
                }

        .actions_card_header {
            display: flex;
            justify-content: space-between;
            width: 100%;
        }

        .table td, .table th {
            vertical-align: middle;
        }

        a {
            cursor: pointer
        }

        #example2 td a, #example2 td button {
            font-size: 16px;
        }

        .draggable-table .draggable-table__drag {
            /*  font-size: 0.95em;
                font-weight: lighter;
                text-transform: capitalize;*/
            position: absolute;
            width: 100%;
            border: 1px solid #f1f1f1;
            z-index: 10;
            cursor: grabbing;
            -webkit-box-shadow: 2px 2px 3px 0px rgba(0, 0, 0, 0.05);
            box-shadow: 2px 2px 3px 0px rgba(0, 0, 0, 0.05);
            opacity: 1;
        }

            .draggable-table .draggable-table__drag .td-flex {
                display: none;
            }

        .draggable-table thead th {
        }

        .draggable-table tbody tr {
            cursor: grabbing;
        }

            .draggable-table tbody tr td {
                user-select: none;
            }

            .draggable-table tbody tr:nth-child(even) {
                background-color: #f7f7f7;
            }

            .draggable-table tbody tr:nth-child(odd) {
                background-color: #fff;
            }

            .draggable-table tbody tr.is-dragging {
                background: #f1c40f;
            }

                .draggable-table tbody tr.is-dragging td {
                    color: #ffe683;
                }

                    .draggable-table tbody tr.is-dragging td .td-flex {
                        display: none;
                    }

        .td-flex {
            display: flex;
            align-items: center;
        }

            .td-flex a {
                margin: 0 3px;
            }
    </style>
}
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Danh sách dự án</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a asp-page="/Index">Home</a></li>
                    <li class="breadcrumb-item active">Dự án</li>
                </ol>
            </div>
        </div>
    </div>
</section>

<!-- Main content -->
<section class="content">
    <div class="card">
        <div class="card-header actions_card_header">
            <div>
                <a class="create_btn btn btn-success" asp-page="/Project/Create"><i class="fas fa-plus-circle"></i> Thêm mới</a>
                <a id="save_indexes" style="color:#fff" class="save_btn btn btn-success"><i class="fas fa-sync-alt"></i> Khởi tạo lại thứ tự</a>
            </div>


            <div id="filter_search"></div>

        </div>
        <div class="card-body">
            <table id="example2" class="table table-bordered table-hover draggable-table">
                <thead>
                    <tr>
                        <th style="width:50px">ID</th>
                        @*<th style="width:80px">Index</th>*@
                        <th>Tên dự án</th>
                        <th style="width:120px">Khách hàng</th>
                        <th style="width:120px">Năm</th>
                        <th style="width:120px">Trạng thái</th>
                        <th style="width:120px">Ngày tạo</th>
                        <th style="width:240px"></th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
    <form method="post"></form>
</section>

@section Scripts{
    <!-- DataTables -->
    <script src="~/lib/datatables/jquery.dataTables.js"></script>
    <script src="~/lib/datatables-bs4/js/dataTables.bootstrap4.js"></script>
    <script src="~/lib/jquery-confirm/jquery-confirm.min.js"></script>
    <script>
        $(function () {
            var pageLength = 25;
            var table = $('#example2').DataTable({
                "paging": true,
                "ordering": false,
                "lengthChange": false,
                "searching": true,
                "info": true,
                "autoWidth": false,
                "serverSide": true,
                "processing": true,
                "select": true,
                "pageLength": pageLength,
                'createdRow': function (row, data, dataIndex) {
                    $(row).attr('data-id', data.id);
                    $(row).attr('data-index', dataIndex);
                },
                "ajax": {
                    url: '/admin/project?handler=data',
                    data: function (d) {
                        _d = {
                            start: d.start,
                            length: d.length,
                            draw: d.draw,
                            textSearch: d.search.value
                        };
                        return _d;
                    }
                },
                "columns": [
                    { "data": "id" },
                  
                    { "data": "title" },
                    { "data": "investor" },
                    { "data": "year" },
                    {
                        "data": "status", render: function (data, type, row) {
                            
                            if (data) {
                             
                                return `<button title="Click để đổi trạng thái" class="row_status btn btn-success"><i class="far fa-eye"></i> Hiển thị</button>`;
                            }
                            else return `<button title="Click để đổi trạng thái" class="row_status btn btn-secondary"><i class="far fa-eye-slash"></i> Đang ẩn</button>`;
                        }
                    },
                    { "data": "createdOnDate" },
                    {
                        data: null,
                        className: "center",
                        defaultContent: `<div class="td-flex">
        <a href="" class="row_down btn btn-success"><i class="fas fa-arrow-down"></i></a>
<a href="" class="row_up btn btn-success"><i class="fas fa-arrow-up"></i></a>
<a href="" class="row_edit btn btn-warning"><i class="far fa-edit"></i></a>
<a href="" class="row_remove btn btn-danger"><i class="fa fa-trash"></i></a>
</div>
`
                    }
                ]
            });
            //$('#add_to_banner_btn').on('click', 'tr', function () {
            //    console.log(table.row(this).data());
            //});
            $('#add_to_banner_btn').on('click', function () {
                let data = table.rows('.selected').data()[0];
                if (data) {
                    $.confirm({
                        title: 'Thêm vào slide trang chủ',
                        content: 'Bạn chắc chắn muốn thêm dự án: "' + data.title + '" vào slide ở trang chủ chứ?',
                        type: 'red',
                        onAction: function (btnName) {
                            if (btnName === 'ok') {
                                $.ajax({
                                    type: 'POST',
                                    url: '/admin/project?handler=AddProjectToHome&Id=' + data.id,
                                    contentType: false,
                                    processData: false,
                                    beforeSend: function (xhr) { xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val()); },
                                }).done(function (res) {
                                    if (res.status) {
                                        table.row($(this).closest('tr')).remove().draw(false);;
                                        $.toast({
                                            heading: 'Success',
                                            text: 'Thêm thành công. Bạn có thể vào trang chủ để kiểm tra',
                                            icon: 'success',
                                            position: 'bottom-right'
                                        });
                                    }
                                    else {
                                        $.toast({
                                            heading: 'Error',
                                            text: res.message,
                                            icon: 'error',
                                            position: 'bottom-right'
                                        });
                                    }

                                }).fail(function () {
                                    $.toast({
                                        heading: 'Error',
                                        text: 'Xóa dự án không thành công',
                                        icon: 'error',
                                        position: 'bottom-right'
                                    });
                                });
                            }
                        }
                    });

                }
            })
            $('#example2 tbody').on('click', 'tr', function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                }
                else {
                    table.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
            });
            $('#example2').on('click', '.row_edit', function (e) {
                e.preventDefault();
                let data = table.row($(this).closest('tr')).data();
                window.location.href = "/admin/project/detail/" + data.id;
            });
            $('#example2').on('click', '.row_up', function (e) {
                e.preventDefault();
                let data = table.row($(this).closest('tr')).data();
                let currentIndex = table.row($(this).closest('tr')).index();
                //if (currentIndex==0)
                //console.log(data);
                if (confirm("Bạn chắc chắn muốn đổi vị trí tin tức này?")) {
                    $.ajax({
                        type: 'POST',
                        url: '/admin/project?handler=ChangeIndex&Id=' + data.id,
                        contentType: false,
                        processData: false,
                        beforeSend: function (xhr) { xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val()); },
                    }).done(function (res) {
                        if (res.status) {

                            swapDataTableRows(currentIndex, currentIndex - 1);
                            $.toast({
                                heading: 'Success',
                                text: 'Đổi vị trí thành công',
                                icon: 'success',
                                position: 'bottom-right'
                            });
                        }
                        else {
                            $.toast({
                                heading: 'Error',
                                text: res.message,
                                icon: 'error',
                                position: 'bottom-right'
                            });
                        }

                    }).fail(function () {
                        $.toast({
                            heading: 'Error',
                            text: 'Thao tác không thành công',
                            icon: 'error',
                            position: 'bottom-right'
                        });
                    });
                }
                //window.location.href = "/admin/news/detail/" + data.id;
            });
            $('#example2').on('click', '.row_down', function (e) {
                e.preventDefault();
                let data = table.row($(this).closest('tr')).data();
                let currentIndex = table.row($(this).closest('tr')).index();
            
                //if (currentIndex==0)
             
                if (confirm("Bạn chắc chắn muốn đổi vị trí tin tức này?")) {
                    $.ajax({
                        type: 'POST',
                        url: '/admin/project?handler=ChangeIndex&Id=' + data.id + '&moveUp=false',
                        contentType: false,
                        processData: false,
                        beforeSend: function (xhr) { xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val()); },
                    }).done(function (res) {
                        if (res.status) {

                            swapDataTableRows(currentIndex, currentIndex + 1);
                            $.toast({
                                heading: 'Success',
                                text: 'Đổi vị trí thành công',
                                icon: 'success',
                                position: 'bottom-right'
                            });
                        }
                        else {
                            $.toast({
                                heading: 'Error',
                                text: res.message,
                                icon: 'error',
                                position: 'bottom-right'
                            });
                        }

                    }).fail(function () {
                        $.toast({
                            heading: 'Error',
                            text: 'Thao tác không thành công',
                            icon: 'error',
                            position: 'bottom-right'
                        });
                    });
                }
                //window.location.href = "/admin/news/detail/" + data.id;
            });

            $('#example2').on('click', '.row_status', function (e) {
                e.preventDefault();
                var data = table.row($(this).closest('tr')).data();
                if (confirm('Bạn chắc chắn muốn đổi trạng thái dự án này chứ?')) {
                    $.ajax({
                        type: 'POST',
                        url: '/admin/project?handler=hide&Id=' + data.id,
                        contentType: false,
                        processData: false,
                        beforeSend: function (xhr) { xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val()); },
                    }).done(function (res) {

                        window.location.reload();
                    }).fail(function () {
                        $.toast({
                            heading: 'Error',
                            text: 'Đổi trạng thái dự dự án không thành công',
                            icon: 'error',
                            position: 'bottom-right'
                        });
                    });
                }

            });
            $('#example2').on('click', '.row_remove', function (e) {
                e.preventDefault();
                let data = table.row($(this).closest('tr')).data();
                $.confirm({
                    title: 'Xác nhận hành động',
                    content: 'Bạn chắc chắn muốn xóa dự án này chứ?',
                    type: 'red',
                    onAction: function (btnName) {
                        if (btnName === 'ok') {
                            $.ajax({
                                type: 'DELETE',
                                url: '/admin/project?Id=' + data.id,
                                contentType: false,
                                processData: false,
                                beforeSend: function (xhr) { xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val()); },
                            }).done(function (res) {
                                table.row($(this).closest('tr')).remove().draw(false);;
                                $.toast({
                                    heading: 'Success',
                                    text: 'Xóa dự án thành công',
                                    icon: 'success',
                                    position: 'bottom-right'
                                });
                            }).fail(function () {
                                $.toast({
                                    heading: 'Error',
                                    text: 'Xóa dự án không thành công',
                                    icon: 'error',
                                    position: 'bottom-right'
                                });
                            });
                        }
                    }
                });
            });
            $('div.dataTables_filter').appendTo('#filter_search');
            function swapDataTableRows(row1Index, row2Index) {
                if (row1Index == pageLength-1) {
                    table.ajax.reload();
                    return;
                }
                else if (row1Index == 0) {
                    table.ajax.reload();
                    return;
                }
                //var rows = datatable.rows().data();
                var row1Data = table.row(row1Index).data();
                var row2Data = table.row(row2Index).data();

                table.row(row1Index).data(row2Data);
                table.row(row2Index).data(row1Data);
                table.draw();
                //    datatable.drow();
            }

            $('#save_indexes').on("click", function (e) {
                e.preventDefault();
     
                $.confirm({
                    title: 'Khởi tạo lại thứ tự các dự án?',
                    content: 'Sử dụng khi việc đổi thứ tự thường xuyên bị lỗi.',
                    type: 'red',
                    buttons: {
                        confirm: function () {
                            $.ajax({
                                type: 'POST',
                                url: '/admin/project?handler=InitIndexes',
                                dataType: 'json',
                                //contentType: false,
                                //processData: false,
                                beforeSend: function (xhr) { xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val()); },
                            }).done(function (res) {
                                // $(row).remove();

                                $.toast({
                                    heading: 'Success',
                                    text: 'Khơi tạo lại thứ tự thành công',
                                    icon: 'success',
                                    position: 'bottom-right'
                                });
                                setTimeout(function () {
                                    window.location.reload();
                                }, 1000);
                            }).fail(function () {
                                $.dialog({
                                    title: 'Error',
                                    content: 'Thao tác không thành công'
                                });
                            });
                        },
                        cancel: function () {

                        },
                    }
                });
            });
        });
    </script>
    <script>
        (function () {
            "use strict";

            const table = document.getElementById('example2');
            

            var currRow = null,
                dragElem = null,
                dropedElem = null,
                mouseDownX = 0,
                mouseDownY = 0,
                mouseX = 0,
                mouseY = 0,
                mouseDrag = false;

            function init() {
                bindMouse();
            }

            function bindMouse() {
                document.addEventListener('mousedown', (event) => {
                    if (event.button != 0) return true;

                    let target = getTargetRow(event.target);
                    if (target) {
                        currRow = target;
                        addDraggableRow(target);
                        currRow.classList.add('is-dragging');


                        let coords = getMouseCoords(event);
                        mouseDownX = coords.x;
                        mouseDownY = coords.y;

                        mouseDrag = true;
                    }
                });

                document.addEventListener('mousemove', (event) => {
                    if (!mouseDrag) return;

                    let coords = getMouseCoords(event);
                    mouseX = coords.x - mouseDownX;
                    mouseY = coords.y - mouseDownY;

                    moveRow(mouseX, mouseY);
                });

                document.addEventListener('mouseup', (event) => {
                    if (!mouseDrag) return;
                    console.log($(dragElem).attr("data-id"));
                    console.log($(dropedElem).attr("data-id"));

                    currRow.classList.remove('is-dragging');
                    table.removeChild(dragElem);
                    sendSwapRowsRequest($(dragElem).attr("data-id"), $(dropedElem).attr("data-id"));
                    dragElem = null;
                    dropedElem = null;
                    mouseDrag = false;
                });
            }

            function sendSwapRowsRequest(id1, id2) {
                if (id1 == undefined || id2 == undefined) return;
                $.ajax({
                    type: 'POST',
                    url: '/admin/project?handler=RowSwap',
                    data: {
                        ids: [id1,id2]
                    },
                    dataType: 'json',
                    //contentType: false,
                    //processData: false,
                    beforeSend: function (xhr) { xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val()); },
                }).done(function (res) {
                    // $(row).remove();
                    $.toast({
                        heading: 'Success',
                        text: 'Thay đổi thứ tự thành công',
                        icon: 'success',
                        position: 'bottom-right'
                    });
                }).fail(function () {
                    $.dialog({
                        title: 'Error',
                        content: 'Thao tác không thành công'
                    });
                });
            }
            
            function swapRow(row, index) {
                const tbody = table.querySelector('tbody');
                let currIndex = Array.from(tbody.children).indexOf(currRow),
                    row1 = currIndex > index ? currRow : row,
                    row2 = currIndex > index ? row : currRow;
                dropedElem = row;
                tbody.insertBefore(row1, row2);
            }

            function moveRow(x, y) {
                dragElem.style.transform = "translate3d(" + x + "px, " + y + "px, 0)";

                let dPos = dragElem.getBoundingClientRect(),
                    currStartY = dPos.y, currEndY = currStartY + dPos.height,
                    rows = getRows();

                for (var i = 0; i < rows.length; i++) {
                    let rowElem = rows[i],
                        rowSize = rowElem.getBoundingClientRect(),
                        rowStartY = rowSize.y, rowEndY = rowStartY + rowSize.height;

                    if (currRow !== rowElem && isIntersecting(currStartY, currEndY, rowStartY, rowEndY)) {
                        if (Math.abs(currStartY - rowStartY) < rowSize.height / 2)
                            swapRow(rowElem, i);
                    }
                }
            }

            function addDraggableRow(target) {
                dragElem = target.cloneNode(true);
                dragElem.classList.add('draggable-table__drag');
                dragElem.style.height = getStyle(target, 'height');
                dragElem.style.background = getStyle(target, 'backgroundColor');
                for (var i = 0; i < target.children.length; i++) {
                    let oldTD = target.children[i],
                        newTD = dragElem.children[i];
                    newTD.style.width = getStyle(oldTD, 'width');
                    newTD.style.height = getStyle(oldTD, 'height');
                    newTD.style.padding = getStyle(oldTD, 'padding');
                    newTD.style.margin = getStyle(oldTD, 'margin');
                }

                table.appendChild(dragElem);


                let tPos = target.getBoundingClientRect(),
                    dPos = dragElem.getBoundingClientRect();
                dragElem.style.bottom = ((dPos.y - tPos.y) - tPos.height) + "px";
                dragElem.style.left = "-1px";

                document.dispatchEvent(new MouseEvent('mousemove',
                    { view: window, cancelable: true, bubbles: true }
                ));
            }

            function getRows() {
                return table.querySelectorAll('tbody tr');
            }

            function getTargetRow(target) {
                let elemName = target.tagName.toLowerCase();

                if (elemName == 'tr') return target;
                if (elemName == 'td') return target.closest('tr');
            }

            function getMouseCoords(event) {
                return {
                    x: event.clientX,
                    y: event.clientY
                };
            }

            function getStyle(target, styleName) {
                let compStyle = getComputedStyle(target),
                    style = compStyle[styleName];

                return style ? style : null;
            }

            function isIntersecting(min0, max0, min1, max1) {
                return Math.max(min0, max0) >= Math.min(min1, max1) &&
                    Math.min(min0, max0) <= Math.max(min1, max1);
            }



            init();

        })();
    </script>
}
